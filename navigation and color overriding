import 'package:flutter/material.dart';
import 'package:flutter_svg/flutter_svg.dart';
import 'dart:collection';
import 'package:custom_painters/custom_painters.dart';

class CampusMap extends StatefulWidget {
  @override
  _CampusMapState createState() => _CampusMapState();
}

class _CampusMapState extends State<CampusMap> {
  TextEditingController fromController = TextEditingController();
  TextEditingController toController = TextEditingController();
  String selectedFrom = '';
  String selectedTo = '';
  List<String> shortestPath = [];

  // Sample graph representation (rooms as nodes, paths as edges)
  final Map<String, Map<String, int>> campusGraph = {
    'Room A': {'Room B': 2, 'Room C': 4},
    'Room B': {'Room A': 2, 'Room C': 1, 'Room D': 7},
    'Room C': {'Room A': 4, 'Room B': 1, 'Room D': 3},
    'Room D': {'Room B': 7, 'Room C': 3}
  };

  List<String> findShortestPath(String start, String end) {
    if (!campusGraph.containsKey(start) || !campusGraph.containsKey(end)) {
      return [];
    }
    
    Map<String, int> distances = {};
    Map<String, String?> previousNodes = {};
    PriorityQueue<MapEntry<String, int>> queue = PriorityQueue(
        (a, b) => a.value.compareTo(b.value));

    campusGraph.keys.forEach((node) {
      distances[node] = double.infinity.toInt();
      previousNodes[node] = null;
    });
    distances[start] = 0;
    queue.add(MapEntry(start, 0));

    while (queue.isNotEmpty) {
      String current = queue.removeFirst().key;

      if (current == end) {
        List<String> path = [];
        while (current != null) {
          path.insert(0, current);
          current = previousNodes[current]!;
        }
        return path;
      }

      campusGraph[current]?.forEach((neighbor, weight) {
        int newDist = distances[current]! + weight;
        if (newDist < distances[neighbor]!) {
          distances[neighbor] = newDist;
          previousNodes[neighbor] = current;
          queue.add(MapEntry(neighbor, newDist));
        }
      });
    }
    return [];
  }

  void searchAndNavigate() {
    setState(() {
      shortestPath = findShortestPath(selectedFrom, selectedTo);
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text("Campus Map")),
      body: Column(
        children: [
          Padding(
            padding: const EdgeInsets.all(8.0),
            child: Row(
              children: [
                Expanded(
                  child: TextField(
                    controller: fromController,
                    decoration: InputDecoration(
                      labelText: "From",
                      border: OutlineInputBorder(),
                    ),
                    onChanged: (value) {
                      setState(() {
                        selectedFrom = value;
                      });
                    },
                  ),
                ),
                SizedBox(width: 8),
                Expanded(
                  child: TextField(
                    controller: toController,
                    decoration: InputDecoration(
                      labelText: "To",
                      border: OutlineInputBorder(),
                    ),
                    onChanged: (value) {
                      setState(() {
                        selectedTo = value;
                      });
                    },
                  ),
                ),
                IconButton(
                  icon: Icon(Icons.search),
                  onPressed: searchAndNavigate,
                ),
              ],
            ),
          ),
          Text(shortestPath.isNotEmpty
              ? "Path: " + shortestPath.join(" â†’ ")
              : "No path found"),
          Expanded(
            child: Stack(
              children: [
                SvgPicture.asset(
                  'assets/map_of_campus.svg',
                  semanticsLabel: 'Campus Map',
                  fit: BoxFit.contain,
                ),
                CustomPaint(
                  size: Size(double.infinity, double.infinity),
                  painter: PathPainter(shortestPath),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }
}

class PathPainter extends CustomPainter {
  final List<String> path;
  PathPainter(this.path);

  @override
  void paint(Canvas canvas, Size size) {
    if (path.isEmpty) return;
    Paint paint = Paint()
      ..color = Colors.yellow
      ..strokeWidth = 4.0
      ..style = PaintingStyle.stroke;

    Path drawingPath = Path();
    // Example path drawing logic
    // You need to map room names to actual positions on your SVG
    drawingPath.moveTo(50, 50);
    drawingPath.lineTo(150, 150);
    drawingPath.lineTo(250, 50);

    canvas.drawPath(drawingPath, paint);
  }

  @override
  bool shouldRepaint(PathPainter oldDelegate) => true;
}
